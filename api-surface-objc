public class DDNSURLSessionDelegate: DDURLSessionDelegate
public class DDTrackingConsent: NSObject
 public static func granted() -> DDTrackingConsent
 public static func notGranted() -> DDTrackingConsent
 public static func pending() -> DDTrackingConsent
public class DDAppContext: NSObject
 public init(mainBundle: Bundle)
 override public init()
public class DDDatadog: NSObject
 public static func initialize(appContext: DDAppContext, configuration: DDConfiguration)
 public static func initialize(appContext: DDAppContext,trackingConsent: DDTrackingConsent,configuration: DDConfiguration)
 public static func setVerbosityLevel(_ verbosityLevel: DDSDKVerbosityLevel)
 public static func verbosityLevel() -> DDSDKVerbosityLevel
 public static func setUserInfo(id: String? = nil, name: String? = nil, email: String? = nil)
 public static func setTrackingConsent(consent: DDTrackingConsent)
public class DDEndpoint: NSObject
 public static func eu() -> DDEndpoint
 public static func us() -> DDEndpoint
 public static func gov() -> DDEndpoint
public class DDLogsEndpoint: NSObject
 public static func eu() -> DDLogsEndpoint
 public static func us() -> DDLogsEndpoint
 public static func gov() -> DDLogsEndpoint
 public static func custom(url: String) -> DDLogsEndpoint
public class DDTracesEndpoint: NSObject
 public static func eu() -> DDTracesEndpoint
 public static func us() -> DDTracesEndpoint
 public static func gov() -> DDTracesEndpoint
 public static func custom(url: String) -> DDTracesEndpoint
public enum DDBatchSize: Int
 case small
 case medium
 case large
public enum DDUploadFrequency: Int
 case frequent
 case average
 case rare
public class DDConfiguration: NSObject
 public static func builder(clientToken: String, environment: String) -> DDConfigurationBuilder
 public static func builder(rumApplicationID: String, clientToken: String, environment: String) -> DDConfigurationBuilder
public class DDConfigurationBuilder: NSObject
 public func enableLogging(_ enabled: Bool)
 public func enableTracing(_ enabled: Bool)
 public func enableRUM(_ enabled: Bool)
 public func set(endpoint: DDEndpoint)
 public func set(customLogsEndpoint: URL)
 public func set(customTracesEndpoint: URL)
 public func set(customRUMEndpoint: URL)
 public func set(logsEndpoint: DDLogsEndpoint)
 public func set(tracesEndpoint: DDTracesEndpoint)
 public func set(tracedHosts: Set<String>)
 public func track(firstPartyHosts: Set<String>)
 public func set(serviceName: String)
 public func set(rumSessionsSamplingRate: Float)
 public func trackUIKitRUMViews()
 public func trackUIKitRUMViews(using predicate: DDUIKitRUMViewsPredicate)
 public func trackUIKitActions()
 public func set(batchSize: DDBatchSize)
 public func set(uploadFrequency: DDUploadFrequency)
 public func build() -> DDConfiguration
public class DDGlobal: NSObject
 public static var sharedTracer = DatadogObjc.DDTracer(swiftTracer: Datadog.Global.sharedTracer)
 public static var rum = DatadogObjc.DDRUMMonitor(swiftRUMMonitor: Datadog.Global.rum)
public enum DDSDKVerbosityLevel: Int
 case none
 case debug
 case info
 case notice
 case warn
 case error
 case critical
public class DDLogger: NSObject
 public func debug(_ message: String)
 public func debug(_ message: String, attributes: [String: Any])
 public func debug(_ message: String, error: NSError, attributes: [String: Any])
 public func info(_ message: String)
 public func info(_ message: String, attributes: [String: Any])
 public func info(_ message: String, error: NSError, attributes: [String: Any])
 public func notice(_ message: String)
 public func notice(_ message: String, attributes: [String: Any])
 public func notice(_ message: String, error: NSError, attributes: [String: Any])
 public func warn(_ message: String)
 public func warn(_ message: String, attributes: [String: Any])
 public func warn(_ message: String, error: NSError, attributes: [String: Any])
 public func error(_ message: String)
 public func error(_ message: String, attributes: [String: Any])
 public func error(_ message: String, error: NSError, attributes: [String: Any])
 public func critical(_ message: String)
 public func critical(_ message: String, attributes: [String: Any])
 public func critical(_ message: String, error: NSError, attributes: [String: Any])
 public func addAttribute(forKey key: String, value: Any)
 public func removeAttribute(forKey key: String)
 public func addTag(withKey key: String, value: String)
 public func removeTag(withKey key: String)
 public func add(tag: String)
 public func remove(tag: String)
 public static func builder() -> DDLoggerBuilder
public class DDLoggerBuilder: NSObject
 public func set(serviceName: String)
 public func set(loggerName: String)
 public func sendNetworkInfo(_ enabled: Bool)
 public func sendLogsToDatadog(_ enabled: Bool)
 public func printLogsToConsole(_ enabled: Bool)
 public func build() -> DDLogger
public protocol OTSpan
 var context: OTSpanContext
 var tracer: OTTracer
 func setOperationName(_ operationName: String)
 func setTag(_ key: String, value: NSString)
 func setTag(_ key: String, numberValue: NSNumber)
 func setTag(_ key: String, boolValue: Bool)
 func log(_ fields: [String: NSObject])
 func log(_ fields: [String: NSObject], timestamp: Date?)
 func setBaggageItem(_ key: String, value: String) -> OTSpan
 func getBaggageItem(_ key: String) -> String?
 func finish()
 func finishWithTime(_ finishTime: Date?)
 func setActive() -> OTSpan
public protocol OTSpanContext
 func forEachBaggageItem(_ callback: (_ key: String, _ value: String) -> Bool)
public let OTFormatHTTPHeaders = "OTFormatHTTPHeaders"
public protocol OTTracer
 func startSpan(_ operationName: String) -> OTSpan
 func startSpan(_ operationName: String, tags: NSDictionary?) -> OTSpan
 func startSpan(_ operationName: String, childOf parent: OTSpanContext?) -> OTSpan
 func startSpan(_ operationName: String, childOf parent: OTSpanContext?, tags: NSDictionary?) -> OTSpan
 func startSpan(_ operationName: String, childOf parent: OTSpanContext?, tags: NSDictionary?, startTime: Date?) -> OTSpan
 func inject(_ spanContext: OTSpanContext, format: String, carrier: Any) throws
 func extractWithFormat(_ format: String, carrier: Any) throws
public class DDRUMView: NSObject
 public var path: String
 public var attributes: [String: Any]
 public init(path: String, attributes: [String: Any])
public protocol DDUIKitRUMViewsPredicate: AnyObject
 func rumView(for viewController: UIViewController) -> DDRUMView?
public enum DDRUMErrorSource: Int
 case source
 case network
 case webview
 case custom
public enum DDRUMUserActionType: Int
 case tap
 case scroll
 case swipe
 case custom
public class DDRUMMonitor: NSObject
 override public convenience init()
 public func startView(viewController: UIViewController,path: String?,attributes: [String: Any])
 public func stopView(viewController: UIViewController,attributes: [String: Any])
 public func addTiming(name: String)
 public func addError(error: Error,source: DDRUMErrorSource,attributes: [String: Any])
 public func startResourceLoading(resourceKey: String,request: URLRequest,attributes: [String: Any])
 public func startResourceLoading(resourceKey: String,url: URL,attributes: [String: Any])
 public func addResourceMetrics(resourceKey: String,metrics: URLSessionTaskMetrics,attributes: [String: Any])
 public func stopResourceLoading(resourceKey: String,response: URLResponse,size: Int64?,attributes: [String: Any])
 public func stopResourceLoadingWithError(resourceKey: String,error: Error,response: URLResponse?,attributes: [String: Any])
 public func stopResourceLoadingWithError(resourceKey: String,errorMessage: String,response: URLResponse?,attributes: [String: Any])
 public func startUserAction(type: DDRUMUserActionType,name: String,attributes: [String: Any])
 public func stopUserAction(type: DDRUMUserActionType,name: String?,attributes: [String: Any])
 public func addUserAction(type: DDRUMUserActionType,name: String,attributes: [String: Any])
 public func addAttribute(forKey key: String,value: Any)
 public func removeAttribute(forKey key: String)
public class DDTracer: NSObject, DatadogObjc.OTTracer
 public static func initialize(configuration: DDTracerConfiguration) -> DatadogObjc.OTTracer
 public convenience init(configuration: DDTracerConfiguration)
 public func startSpan(_ operationName: String) -> OTSpan
 public func startSpan(_ operationName: String, tags: NSDictionary?) -> OTSpan
 public func startSpan(_ operationName: String, childOf parent: OTSpanContext?) -> OTSpan
 public func startSpan(_ operationName: String,childOf parent: OTSpanContext?,tags: NSDictionary?) -> OTSpan
 public func startSpan(_ operationName: String,childOf parent: OTSpanContext?,tags: NSDictionary?,startTime: Date?) -> OTSpan
 public func inject(_ spanContext: OTSpanContext, format: String, carrier: Any) throws
 public func extractWithFormat(_ format: String, carrier: Any) throws
public class DDTracerConfiguration: NSObject
 override public init()
 public func set(serviceName: String)
 public func sendNetworkInfo(_ enabled: Bool)
public class DDHTTPHeadersWriter: NSObject
 override public init()
